package coreVulnerabilityTests;

import org.junit.Test;
import org.junit.After;

import auto.*;
import core.*;

public class CoreVulnerabilityTest {

 @Test
   public void testVulnerability() {

      Software userland = new Software("Userland");
      Software kernel = new Software("Kernel");
      Account root = new Account("RootAccount");
      Account user = new Account("UserAccount");
      Vulnerability privEsc = new Vulnerability("PrivEsc");

      kernel.addAccounts(root);
      userland.addAccounts(user);
      userland.addExecutor(kernel);
      userland.addAccessVulnerabilities(privEsc);
      privEsc.addPrivileges(root);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(userland.connect);
      attacker.addAttackPoint(user.compromise);

      attacker.attack();

      userland.access.assertCompromisedInstantaneously();
      kernel.connect.assertCompromisedInstantaneously();
      privEsc.exploit.assertCompromisedWithEffort();
      root.compromise.assertCompromisedWithEffort();
      kernel.access.assertCompromisedWithEffort();
   }


   @Test
   public void testProduct() {
      Machine machine = new Machine("Machine");
		Product product = new Product("Product");
		Vulnerability vulnerability = new Vulnerability("Vulnerability");
		Data data = new Data("Data");
		Account dataReadPrivileges = new Account("DataReadPrivileges");
	
		machine.addProduct(product);
		machine.addData(data);
		data.addReadingAccounts(dataReadPrivileges);
		product.addConnectionVulnerabilities(vulnerability);
		vulnerability.addPrivileges(dataReadPrivileges);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(machine.connect);
      
      attacker.attack();

		product.connect.assertCompromisedInstantaneously();
      vulnerability.exploit.assertCompromisedWithEffort();
		dataReadPrivileges.compromise.assertCompromisedWithEffort();
		// Below two were changed to uncompromised
		//data.requestAccess.assertCompromisedInstantaneously();
		//data.read.assertCompromisedWithEffort();
		data.requestAccess.assertUncompromised();
		data.read.assertUncompromised();
	}


	@After
	public void deleteModel() {
		Asset.allAssets.clear();
		AttackStep.allAttackSteps.clear();
		Defense.allDefenses.clear();
	}


}


